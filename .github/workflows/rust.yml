name: Rust

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  CARGO_TERM_COLOR: always

jobs:
  build:

    runs-on: ubuntu-latest

    strategy:
     fail-fast: false
     matrix:
       target: [x86_64-pc-windows-gnu, x86_64-unknown-linux-musl, x86_64-apple-darwin]

    steps:
    - name: Clone Repo
      uses: actions/checkout@v4
    - name: Install fontconfig
      run: sudo apt install -y gcc pkg-config openssl libasound2-dev cmake build-essential python3 libfreetype6-dev libexpat1-dev libxcb-composite0-dev libssl-dev libx11-dev libfontconfig1-dev
    # - name: Compile and release
    #   uses: rust-build/rust-build.action@v1.4.5
    #   with:
    #     RUSTTARGET: ${{ matrix.target }}
    - name: Get the release version from the tag
      shell: bash
      run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV
    - name: Build
      uses: actions-rs/cargo@v1
      with:
        use-cross: true
        command: build
        args: --verbose --release --target ${{ matrix.target }}
    - name: Build archive
      shell: bash
      run: |
        # Replace with the name of your binary
        binary_name="<BINARY_NAME>"
    
        dirname="$binary_name-${{ env.VERSION }}-${{ matrix.target }}"
        mkdir "$dirname"
        if [ "${{ matrix.os }}" = "windows-latest" ]; then
          mv "target/${{ matrix.target }}/release/$binary_name.exe" "$dirname"
        else
          mv "target/${{ matrix.target }}/release/$binary_name" "$dirname"
        fi
    
        if [ "${{ matrix.os }}" = "windows-latest" ]; then
          7z a "$dirname.zip" "$dirname"
          echo "ASSET=$dirname.zip" >> $GITHUB_ENV
        else
          tar -czf "$dirname.tar.gz" "$dirname"
          echo "ASSET=$dirname.tar.gz" >> $GITHUB_ENV
        fi

    - name: Release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          ${{ env.ASSET }}
